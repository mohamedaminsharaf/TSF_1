# -*- coding: utf-8 -*-
"""TSF_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UX5ebzo3RrQksO25PxeC5TuWVwkmz7mD
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# read the csv file
data = pd.read_csv('https://raw.githubusercontent.com/AdiPersonalWorks/Random/master/student_scores%20-%20student_scores.csv')

# show the first 5 rows to see how the columns and data looks
data.head()

# know the data types and counts of the data
data.info()

# see the statistics of the data
data.describe()

# show the data on a scatterplot
plt.scatter(data.Hours,data.Scores)

"""Scatter Plot shows positive correlation"""

#seperate data to feature and target
X = data.iloc[:,:-1].values
y = data.iloc[:,-1].values

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=0)

"""# Import the linear regression model from sklearn and use it to predict the data"""

from sklearn.linear_model import LinearRegression

lr = LinearRegression()

#Training the model
lr.fit(X_train,y_train)

#plotting the best fit line
line = lr.coef_*X+lr.intercept_
plt.scatter(X, y)
plt.plot(X, line);
plt.show()

# predict the data
y_predict = lr.predict(X_test)
y_predict

hours = [[9.25]]
own = lr.predict(hours)
own

# see error in prediction
from sklearn.metrics import mean_squared_error
mean_squared_error(y_test,y_predict)

# another method of checking for error in prediction
from sklearn.metrics import mean_absolute_error
mean_absolute_error(y_test,y_predict)

# detecting the score of the model
lr.score(X_train,y_train)*100

